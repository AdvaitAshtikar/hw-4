---
title: "Homework 4"
author: "[Advait Ashtikar]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
editor: 
  markdown: 
    wrap: 72
---

[Link to the Github repository](https://github.com/psu-stat380/hw-4)

------------------------------------------------------------------------

::: {.callout-important style="font-size: 0.8em;"}
## Due: Sun, Apr 2, 2023 \@ 11:59pm

Please read the instructions carefully before submitting your
assignment.

1.  This assignment requires you to only upload a `PDF` file on Canvas
2.  Don't collapse any code cells before submitting.
3.  Remember to make sure all your code output is rendered properly
    before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter
before submitting your assignment ⚠️
:::

We will be using the following libraries:

```{r}
library(dplyr)
library(readr)
library(tidyr)
library(purrr)
library(stringr)
library(corrplot)
library(car)
library(caret)
library(torch)
library(nnet)
library(broom)
```

## <br><br><br><br>

## Question 1

::: callout-tip
## 30 points

Automatic differentiation using `torch`
:::

###### 1.1 (5 points)

Consider $g(x, y)$ given by $$
g(x, y) = (x - 3)^2 + (y - 4)^2.
$$

Using elementary calculus derive the expressions for

$$
\frac{d}{dx}g(x, y), \quad \text{and} \quad \frac{d}{dy}g(x, y).
$$

Using your answer from above, what is the answer to $$
\frac{d}{dx}g(x, y) \Bigg|_{(x=3, y=4)} \quad \text{and} \quad \frac{d}{dy}g(x, y) \Bigg|_{(x=3, y=4)} ?
$$

Define $g(x, y)$ as a function in R, compute the gradient of $g(x, y)$
with respect to $x=3$ and $y=4$. Does the answer match what you
expected?

> $$
> \begin{align}
> \frac{\partial}{\partial x} g(x,y) &= 2(x-3) \\
> \frac{\partial}{\partial y} g(x,y) &= 2(y-4)
> \end{align}
> $$
>
> To find the values of the partial derivatives at $(x=3, y=4)$, we
> simply substitute these values into the expressions above: $$
> \begin{align}
> \frac{\partial}{\partial x} g(x,y) \Bigg|{(x=3,y=4)} &= 2(3-3) = 0 \\
> \frac{\partial}{\partial y} g(x,y) \Bigg|{(x=3,y=4)} &= 2(4-4) = 0
> \end{align}
> $$

```{r}
#Defining the function g(x, y)
g <- function(x){
  return((x[1] - 3)^2 + (x[2] - 4)^2)
}

#Computing the gradient of g(x, y) at x = 3 and y = 4
library(numDeriv)
grad_g <- grad(g, c(3, 4))
grad_g
```

> Yes, the answer matches the expected answer.

------------------------------------------------------------------------

###### 1.2 (10 points)

$$\newcommand{\u}{\boldsymbol{u}}\newcommand{\v}{\boldsymbol{v}}$$

Consider $h(\u, \v)$ given by $$
h(\u, \v) = (\u \cdot \v)^3,
$$ where $\u \cdot \v$ denotes the dot product of two vectors, i.e.,
$\u \cdot \v = \sum_{i=1}^n u_i v_i.$

Using elementary calculus derive the expressions for the gradients

$$
\begin{aligned}
\nabla_\u h(\u, \v) &= \Bigg(\frac{d}{du_1}h(\u, \v), \frac{d}{du_2}h(\u, \v), \dots, \frac{d}{du_n}h(\u, \v)\Bigg)
\end{aligned}
$$

Using your answer from above, what is the answer to
$\nabla_\u h(\u, \v)$ when $n=10$ and

$$
\begin{aligned}
\u = (-1, +1, -1, +1, -1, +1, -1, +1, -1, +1)\\
\v = (-1, -1, -1, -1, -1, +1, +1, +1, +1, +1)
\end{aligned}
$$

Define $h(\u, \v)$ as a function in R, initialize the two vectors $\u$
and $\v$ as `torch_tensor`s. Compute the gradient of $h(\u, \v)$ with
respect to $\u$. Does the answer match what you expected?

> $$
> \nabla_\u h(\u, \v) = \begin{pmatrix} \frac{\partial}{\partial u_1}h(\u, \v) \\ \frac{\partial}{\partial u_2}h(\u, \v) \\ \vdots \\ \frac{\partial}{\partial u_n}h(\u, \v) \end{pmatrix} = 3(\u \cdot \v)^2 \begin{pmatrix} v_1 \\ v_2 \\ \vdots \\ v_n \end{pmatrix} = 3(\u \cdot \v)^2 \v
> $$
>
> Using the given values for $\u$ and $\v$, we have:
>
> $$
> \nabla_\u h(\u, \v) = 3(-5)^2 \begin{pmatrix} -1 \\ -1 \\ -1 \\ -1 \\ -1 \\ 1 \\ 1 \\ 1 \\ 1 \\ 1 \end{pmatrix} = 3 \times 25 \begin{pmatrix} -1 \\ -1 \\ -1 \\ -1 \\ -1 \\ 1 \\ 1 \\ 1 \\ 1 \\ 1 \end{pmatrix} = -75\begin{pmatrix} 1 \\ 1 \\ 1 \\ 1 \\ 1 \\ -1 \\ -1 \\ -1 \\ -1 \\ -1 \end{pmatrix}
> $$

```{r}
library(torch)
u <- torch_tensor(c(-1, 1, -1, 1, -1, 1, -1, 1, -1, 1))
v <- torch_tensor(c(-1, -1, -1, -1, -1, 1, 1, 1, 1, 1))

h <- function(u, v){
  sum((u %*% as.matrix(v))^3)
}

h_uv <- h(u, v)
h_uv$backward()
u$grad
```

------------------------------------------------------------------------

###### 1.3 (5 points)

Consider the following function $$
f(z) = z^4 - 6z^2 - 3z + 4
$$

Derive the expression for $$
f'(z_0) = \frac{df}{dz}\Bigg|_{z=z_0}
$$ and evaluate $f'(z_0)$ when $z_0 = -3.5$.

Define $f(z)$ as a function in R, and using the `torch` library compute
$f'(-3.5)$.

> To find $f'(z_0)$, we simply differentiate the function \$f(z)\$ with
> respect to \$z\$:
>
> $f′(z)=4z^3−12z−3$
>
> Therefore, we have:
>
> $f′(z_0)=4z_{0}^3−12z_0−3$
>
> Substituting $z_0 = -3.5$, we have:
>
> $f′(−3.5)=4(−3.5)3−12(−3.5)−3=−121$

```{r}
library(torch)

f <- function(z){
  z^4 - 6*z^2 - 3*z + 4
}

z_0 <- torch_tensor(-3.5, requires_grad = TRUE)

output <- f(z_0)
output.backward()
z_0$grad()
```

------------------------------------------------------------------------

###### 1.4 (5 points)

For the same function $f$, initialize $z[1] = -3.5$, and perform $n=100$
iterations of **gradient descent**, i.e.,

> $z[{k+1}] = z[k] - \eta f'(z[k])$ for $k = 1, 2, \dots, 100$

Plot the curve $f$ and add taking $\eta = 0.02$, add the points
$\{z_0, z_1, z_2, \dots z_{100}\}$ obtained using gradient descent to
the plot. What do you observe?

```{r}

```

------------------------------------------------------------------------

###### 1.5 (5 points)

Redo the same analysis as **Question 1.4**, but this time using
$\eta = 0.03$. What do you observe? What can you conclude from this
analysis

```{r}

```

<br><br><br><br> <br><br><br><br> ---

## Question 2

::: callout-tip
## 50 points

Logistic regression and interpretation of effect sizes
:::

For this question we will use the **Titanic** dataset from the Stanford
data archive. This dataset contains information about passengers aboard
the Titanic and whether or not they survived.

------------------------------------------------------------------------

###### 2.1 (5 points)

Read the data from the following URL as a tibble in R. Preprocess the
data such that the variables are of the right data type, e.g., binary
variables are encoded as factors, and convert all column names to lower
case for consistency. Let's also rename the response variable `Survival`
to `y` for convenience.

```{r}
url <- "https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv"

df <- read.csv(url) %>%
  drop_na()

head(df)
```

```{r}
#Converting binary variables to factors
df$Survived = as.factor(df$Survived)
df$Sex = as.factor(df$Sex)

#Renaming the response variable
names(df)[names(df) == "Survived"] <- "y"

#Converting column names to lower case
names(df) <- tolower(names(df))
```

------------------------------------------------------------------------

###### 2.2 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using
`corrplot()`

```{r}
df %>% select(where(is.numeric)) %>%
  cor() %>%
  round(digits = 2) %>%
  corrplot(diag = F)
```

------------------------------------------------------------------------

###### 2.3 (10 points)

Fit a logistic regression model to predict the probability of surviving
the titanic as a function of:

-   `pclass`
-   `sex`
-   `age`
-   `fare`
-   `# siblings`
-   `# parents`

```{r}
full_model <- glm(y ~ pclass + sex + age + fare + siblings.spouses.aboard + parents.children.aboard, data = df, family = binomial())
summary(full_model)
```

------------------------------------------------------------------------

###### 2.4 (30 points)

Provide an interpretation for the slope and intercept terms estimated in
`full_model` in terms of the log-odds of survival in the titanic and in
terms of the odds-ratio (if the covariate is also categorical).

::: callout-hint
Recall the definition of logistic regression from the lecture notes, and
also recall how we interpreted the slope in the linear regression model
(particularly when the covariate was categorical).
:::

> The intercept term (5.297252) represents the estimated log-odds of
> survival when all the predictor variables are equal to zero. In other
> words, when a passenger is female, in the first class, with no
> siblings/spouses or parents/children on board, and with statistically
> significant $(p < 2e-16)$, meaning that the log-odds of survival is
> significantly different from zero for the reference category. The
> slope terms represent the estimated change in the log-odds of survival
> associated with one-unit increase in each predictor variable. The odds
> ratio can be calculated by taking the exponent of each coefficient.
> For example, for the `siblings.spouses.aboard` predictor, the exponent
> of the coefficient is -0.401831. This suggests that the odds of
> survival decrease by 0.401831, which is by a factor of 33.1% for each
> additional sibling/spouse on board.

<br><br><br><br> <br><br><br><br> ---

## Question 3

::: callout-tip
## 70 points

Variable selection and logistic regression in `torch`
:::

------------------------------------------------------------------------

###### 3.1 (15 points)

Complete the following function `overview` which takes in two
categorical vectors (`predicted` and `expected`) and outputs:

-   The prediction accuracy
-   The prediction error
-   The false positive rate, and
-   The false negative rate

```{r}
overview <- function(predicted, expected){
    accuracy <- sum(predicted == expected)/length(expected)
    error <- 1 - accuracy
    total_false_positives <- sum((predicted == "positive") & (expected == "negative"))
    total_true_positives <- sum((predicted == "positive") & (expected == "negative"))
    total_false_negatives <- sum((predicted == "negative") & (expected == "negative"))
    total_true_negatives <- sum((predicted == "negative") & (expected == "negative"))
    false_positive_rate <- total_false_positives / (total_false_positives + total_true_negatives)
    false_negative_rate <- total_false_negatives / (total_false_negatives + total_true_positives)
    return(
        data.frame(
            accuracy = accuracy, 
            error=error, 
            false_positive_rate = false_positive_rate, 
            false_negative_rate = false_negative_rate
        )
    )
}
```

You can check if your function is doing what it's supposed to do by
evaluating

```{r}
overview(df$y, df$y)
```

and making sure that the accuracy is $100\%$ while the errors are $0\%$.

###### 3.2 (5 points)

Display an overview of the key performance metrics of `full_model`

```{r}

```

------------------------------------------------------------------------

###### 3.3 (5 points)

Using backward-stepwise logistic regression, find a parsimonious
alternative to `full_model`, and print its `overview`

```{r}
step_model <- step(full_model, direction = "backward") 
summary(step_model)
```

```{r}
step_predictions <- predict(step_model, df, type = "response")
overview(step_predictions, df$y)
```

------------------------------------------------------------------------

###### 3.4 (15 points)

Using the `caret` package, setup a $5$-fold cross-validation training
method using the `caret::trainControl()` function

```{r}
controls <- trainControl(
  method = "cv",
  number = 5
)
```

Now, using `control`, perform $5$-fold cross validation using
`caret::train()` to select the optimal $\lambda$ parameter for LASSO
with logistic regression.

Take the search grid for $\lambda$ to be in
$\{ 2^{-20}, 2^{-19.5}, 2^{-19}, \dots, 2^{-0.5}, 2^{0} \}$.

```{r}
lasso_fit <- train(
  x = subset(df, select = -y),
  y = df$y,
  method = "glmnet",
  trControl = controls, 
  tuneGrid = expand.grid(
    alpha = 1,
    lambda = 2^seq(-20, 0, by = 0.5)
    ),
  standardize = TRUE,
  family = "binomial"
)
```

Using the information stored in `lasso_fit$results`, plot the results
for cross-validation accuracy vs. $log_2(\lambda)$. Choose the optimal
$\lambda^*$, and report your results for this value of $\lambda^*$.

```{r}
#Plotting cross-validation results
plot(lasso_fit)
```

```{r}
#Finding optimal lambda value
optimal_lambda <- lasso_fit$results$lambda[which.ax(laso_fit$results$Accuracy)]
optimal_accuracy <- max(lasso_fit$results$Accuracy)

#printing the results
cat(paste0("Optimal lambda: ", optimal_lambda, "\n"))
cat(paste0("Cross-validation accuracy for optimal lambda: ", optimal_accuracy, "\n"))
```

------------------------------------------------------------------------

###### 3.5 (25 points)

First, use the `model.matrix()` function to convert the covariates of
`df` to a matrix format

```{r}
covariate_matrix <- model.matrix(full_model)[, -1]
```

Now, initialize the covariates $X$ and the response $y$ as `torch`
tensors

```{r}
X <- torch_tensor(covariate_matrix, dtype = torch_float())
y <- torch_tensor(df$y, dtype = torch_float())
```

Using the `torch` library, initialize an `nn_module` which performs
logistic regression for this dataset. (Remember that we have 6 different
covariates)

```{r}
logistic <- nn_module(
  initialize = function() {
    self$f <- nn_linear(6, 1)
    self$g <- nn_sigmoid()
  },
  forward = function(x) {
   x %>%
      self$f() %>%
      self$g()
  }
)

f <- logistic()
```

You can verify that your code is right by checking that the output to
the following code is a vector of probabilities:

```{r}
f(X)
```

Now, define the loss function `Loss()` which takes in two tensors `X`
and `y` and a function `Fun`, and outputs the **Binary cross Entropy
loss** between `Fun(X)` and `y`.

```{r}
Loss <- function(X, y, Fun){
  y_pred <- f(X)
  return (mean((y_pred - y)^2))
}
```

Initialize an optimizer using `optim_adam()` and perform $n=1000$ steps
of gradient descent in order to fit logistic regression using `torch`.

```{r}
f <- logistic()
optimizer <- optim_adam(f$parameters, lr = 0.01)

n <- 1000
for(i in 1:n){
  loss <- Loss(X, y, f)
  
  optimizer$zero_grad()
  loss$backward()
  optimizer$step()
  
  if(i %% 100 == 0){
    cat(sprintf("Step %d, Loss = %.4f\n", i, loss))
  }
}
```

Using the final, optimized parameters of `f`, compute the compute the
predicted results on `X`

```{r}
predicted_probabilities <- f(X) %>% as_array()
torch_predictions <- ifelse(f(X) < 0.5, 0, 1)

overview(torch_predictions, df$y)
```

------------------------------------------------------------------------

###### 3.6 (5 points)

Create a summary table of the `overview()` summary statistics for each
of the $4$ models we have looked at in this assignment, and comment on
their relative strengths and drawbacks.

```{r}

```

::: {.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br> <br><br><br><br> ---

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
